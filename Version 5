import tkinter as tk
from tkinter import messagebox
import random
import json

OPERATIONS = ["+", "-", "*"]

class LoginMenu(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)  
        self.selection = tk.IntVar()

        self.title("Boxing Math Game")
        self.config(background="#BB005E")
        self.geometry("700x500") 
        self.resizable(False, False)  

        
        try:
            with open("data.json", 'r') as json_file: 
                self.users = json.load(json_file)
        except:
            self.users = []  

        self.username = tk.StringVar()
        self.password = tk.StringVar()

        # UI setup for login menu
        tk.Label(self, text="Username", font=("Arial", 12), fg="white", bg="Black").place(x=205, y=160)
        tk.Entry(self, width=20, textvariable=self.username, font=("Arial", 13)).place(x=300, y=160)
        tk.Label(self, text="Password", font=("Arial", 12), fg="white", bg="Black").place(x=205, y=220)
        tk.Entry(self, width=20, textvariable=self.password, font=("Arial", 13)).place(x=300, y=220)
        tk.Label(self, text="Boxing maths game", font=("Arial", 25), fg="white", bg="#BB005E").place(x=245, y=100)

        # Radio buttons for login and signup
        tk.Radiobutton(self, text="Login", bg="#BB005E", variable=self.selection, value=1).place(x=310, y=300)
        tk.Radiobutton(self, text="Signup", bg="#BB005E", variable=self.selection, value=2).place(x=310, y=340)

        button_login = tk.Button(self, text="Continue", font=("Arial", 12), command=self.login_signup)
        button_login.place(x=315, y=400)

    def login_signup(self):
        if self.selection.get() not in [1, 2]:
            messagebox.showwarning("Warning", "You must select login or signup.")
        elif not self.username.get().isalpha() or len(self.username.get()) < 5:
            messagebox.showerror("Error", "Username must be only letters and minimum 5 chars.")
        else:
            if len(self.password.get()) < 4 or ' ' in self.password.get():
                messagebox.showerror("Error", "Password must have no spaces and be a minimum of 4 chars.")
            else:
                found = False
                for account in self.users:
                    if account["username"] == self.username.get() and account["password"] == self.password.get():
                        found = True
                        if self.selection.get() == 1:  # Login
                            self.destroy()
                            Menu()  # Go to Menu
                            return
                        else:
                            messagebox.showerror("Error", "User with this account name already exists.")
                            return
                
                if not found:
                    if self.selection.get() == 1:
                        messagebox.showerror("Error", "There is no user with these credentials.")
                    else:
                        self.users.append({"username": self.username.get(), "password": self.password.get()})
                        with open("data.json", "w") as w:
                            json.dump(self.users, w)
                        self.destroy()
                        Menu()
                        return

class Menu(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        self.title("Boxing Math Game")
        self.config(background="#BB005E")
        self.geometry("700x500")
        self.resizable(False, False)

        button_start = tk.Button(self, text="Start Game", font=("Arial", 20), command=self.change_page)
        button_start.place(relx=0.5, rely=0.5, anchor="c")

    def change_page(self):
        self.destroy()
        Game()

class Game(tk.Tk):
    player_punches = 0
    cpu_punches = 0
    current_frame = 0

    def __init__(self):
        tk.Tk.__init__(self)

        self.title("Boxing Math Game")
        self.config(background="#BB005E")
        self.geometry("500x500")
        self.resizable(False, False)

        self.entry_variable = tk.StringVar()

        self.canvas = tk.Canvas(self, width=700, height=500, background="#BB005E", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)

        tk.Entry(self, font=("Arial", 16), bg="#BB005E", width=10, textvariable=self.entry_variable).place(relx=0.5, y=440, anchor="center")
        tk.Button(self, text="Submit", command=self.check_answer).place(relx=0.5, y=470, anchor="center")
        self.question = tk.Label(self, text="2+2", font=("Arial", 23), background="#BB005E", fg="white")
        self.question.place(relx=0.5, anchor="center", y=390)

        self.image_gif = tk.PhotoImage(file="boxing.gif", format="gif -index 0")
        self.canvas.create_image(0, 0, anchor="nw", image=self.image_gif)

        self.wrong_or_right = tk.Label(self, text="Wrong", font=("Arial", 14), background="#BB005E", fg="red")

        self.user_punches_label = tk.Label(self, text="User Punches: 0/10", font=("Arial", 14), background="#BB005E", fg="white")
        self.user_punches_label.place(x=2, anchor="nw", y=370)

        self.cpu_punches_label = tk.Label(self, text="CPU Punches: 0/10", font=("Arial", 14), background="#BB005E", fg="white")
        self.cpu_punches_label.place(relx=1, x=-2, anchor="ne", y=370)

        self.gen_question()

    def gen_question(self):
        num1 = random.randint(0, 10)
        num2 = random.randint(0, 10)
        operation = random.choice(["+", "-"])
        question = f"{num1} {operation} {num2}"
        self.answer = eval(question)
        self.question.config(text=question)

    def player_anim(self, set_start):
        try:
            if set_start:
                self.current_frame = 0
            self.image_gif = tk.PhotoImage(file="boxing.gif", format=f"gif -index {self.current_frame}")
            self.canvas.create_image(0, 0, anchor="nw", image=self.image_gif)
            self.current_frame += 1
            if self.current_frame < 10:
                self.after(10, lambda: self.player_anim(False))
        except:
            pass  # Beginners might not handle exceptions with specific actions

    def cpu_anim(self, set_start):
        try:
            if set_start:
                self.current_frame = 11
            self.image_gif = tk.PhotoImage(file="boxing.gif", format=f"gif -index {self.current_frame}")
            self.canvas.create_image(0, 0, anchor="nw", image=self.image_gif)
            self.current_frame += 1
            if self.current_frame < 20:
                self.after(10, lambda: self.cpu_anim(False))
        except:
            pass  # No specific exception handling

    def check_answer(self):
        try:
            if int(self.entry_variable.get()) == self.answer:
                self.wrong_or_right.config(text="Right", fg="green") 
                self.wrong_or_right.place(relx=0.9, anchor="c", y=430)
                self.player_anim(True)
                self.player_punches += 1
                self.user_punches_label.config(text=f"Player Punches: {self.player_punches}/10")
            else:
                self.wrong_or_right.config(text="Wrong", fg="red")
                self.wrong_or_right.place(relx=0.9, anchor="c", y=430)
                self.cpu_anim(True)
                self.cpu_punches += 1
                self.cpu_punches_label.config(text=f"CPU Punches: {self.cpu_punches}/10")

            if self.player_punches >= 10:
                messagebox.showinfo("Info", "You win.")
                self.destroy()
                Menu()
                return
            elif self.cpu_punches >= 10:
                messagebox.showinfo("Info", "You lose.")
                self.destroy()
                Menu()
                return
            else:
                self.gen_question()
        except:
            messagebox.showerror("Error", "Enter a proper number")
    
if __name__ == "__main__":
    app = LoginMenu()
    app.mainloop()
