import tkinter as tk
import random
import time

# def login():
   # username = entry1.get()
    #password = entry2.get()

   # if username == '' and password == '':
      #  messagebox.showerror('login', 'Blanks are not allowed')

    #elif username == 'login' and password == '123':
     ####   messagebox.showinfo('login', 'Login Successful')

       # root.destroy()
       # top = Tk()
        #top.configure(bg='White')
        
class StartupScreen:
    def __init__(self, root):
        self.root = root
        self.root.title('Maths Game')
        self.root.geometry('400x300')
        self.root.configure(bg='#9F2B68')  # Setting the background color for the window
        
        # Welcome Screen with Welcome Message
        self.label = tk.Label(root, text='Welcome to The Best Maths Game', font=('Comic Sans MS', 18), fg='#000080')
        self.label.pack(pady=50)
        
        self.start_button = tk.Button(root, text='Start', font=('Arial', 14), command=self.open_difficulty_selection, fg='#000000')  # Change text color to black
        self.start_button.pack(pady=20)

    def open_difficulty_selection(self):
        self.root.destroy()  # Closing the startup screen after start button is initiated
        main_root = tk.Tk()
        DifficultySelection(main_root)
        main_root.mainloop()

class DifficultySelection:
    def __init__(self, root):
        self.root = root
        self.root.title('Select Difficulty')
        self.root.geometry('400x400')
        self.root.configure(bg='#9F2B68')

        self.label = tk.Label(root, text='Select Difficulty Level', font=('Arial', 20), bg='#9F2B68', fg='#FFFFFF')
        self.easy_button = tk.Button(root, text='Easy', width=20, height=3, font=('Arial', 16), command=lambda: self.start_game(1), fg='#000000')  # Change text color to black
        self.medium_button = tk.Button(root, text='Medium', width=20, height=3, font=('Arial', 16), command=lambda: self.start_game(2), fg='#000000')  # Change text color to black
        self.hard_button = tk.Button(root, text='Hard', width=20, height=3, font=('Arial', 16), command=lambda: self.start_game(3), fg='#000000')  # Change text color to black

        # The Layout of the Diffuclty Level Buttons 
        self.label.pack(pady=20)
        self.easy_button.pack(pady=15)
        self.medium_button.pack(pady=15)
        self.hard_button.pack(pady=15)

    def start_game(self, difficulty_level):
        self.root.destroy()  # Close the difficulty selection window after difficulty level is chosen
        game_root = tk.Tk()
        MathGame(game_root, difficulty_level)
        game_root.mainloop()

class MathGame:
    def __init__(self, root, difficulty_level):
        self.root = root
        self.root.title('Math Game')
        self.root.geometry('300x325')
        self.root.configure(bg='#9F2B68')  # Set background color

        self.points = 0
        self.diff_level = difficulty_level
        self.start_time = None

        # GUI Components
        self.points_label = tk.Label(root, text=f'Points: {self.points}', fg='#FFFFFF', bg='#9F2B68')
        self.timer_label = tk.Label(root, text='Time: 00:00', fg='#FFFFFF', bg='#9F2B68')
        self.question_label = tk.Label(root, text='', fg='#FFFFFF', bg='#9F2B68')
        self.answer_entry = tk.Entry(root)
        self.submit_button = tk.Button(root, text='Submit', command=self.check_answer, fg='#000000', bg='#6B1F4D')  # Change text color to black
        self.feedback_label = tk.Label(root, text='', fg='#FFFFFF', bg='#9F2B68')
        self.start_button = tk.Button(root, text='Start Game', command=self.start_game, fg='#000000', bg='#6B1F4D')  # Change text color to black

        # Layout
        self.points_label.pack(pady=10)
        self.timer_label.pack(pady=10)
        self.question_label.pack(pady=10)
        self.answer_entry.pack(pady=10)
        self.submit_button.pack(pady=10)
        self.feedback_label.pack(pady=10)
        self.start_button.pack(pady=10)

    def start_game(self):
        self.points = 0
        self.start_time = time.time()  # Start the timer after the button is clicked
        self.update_points()
        self.update_timer()
        self.generate_question()
        self.answer_entry.focus_set()

    def update_timer(self):
        if self.points < 10:  # Update the timer only if the game is ongoing
            elapsed_time = int(time.time() - self.start_time)
            minutes = elapsed_time // 60
            seconds = elapsed_time % 60
            self.timer_label.config(text=f'Time: {minutes:02}:{seconds:02}')
            self.root.after(1000, self.update_timer)  # Update the timer every second

    def generate_question(self):
        if self.diff_level == 1:  # Easy: Very simple addition and subtraction
            self.x = random.randint(0, 10)
            self.y = random.randint(0, 10)
            operation = random.choice(['+', '-'])
            self.result = self.x + self.y if operation == '+' else self.x - self.y
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')
        elif self.diff_level == 2:  # Medium: All operations with smaller numbers
            self.x = random.randint(-20, 20)
            self.y = random.randint(-20, 20)
            operation = random.choice(['+', '-', '*', '/'])
            if operation == '+':
                self.result = self.x + self.y
            elif operation == '-':
                self.result = self.x - self.y
            elif operation == '*':
                self.result = self.x * self.y
            else:
                self.result = self.x // self.y if self.y != 0 else 0  # Avoid division by zero
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')
        else:  # Hard: Multiplication and Division with larger numbers
            self.x = random.randint(-50, 50)
            self.y = random.randint(-50, 50)
            operation = random.choice(['+', '-', '*', '/'])
            if operation == '+':
                self.result = self.x + self.y
            elif operation == '-':
                self.result = self.x - self.y
            elif operation == '*':
                self.result = self.x * self.y
            else:
                self.result = self.x // self.y if self.y != 0 else 0  # Avoid division by zero as it will result in an imaginary number that cannot be inputed
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')

    def check_answer(self):
        try:
            answer = int(self.answer_entry.get())
            if answer == self.result:
                self.feedback_label.config(text='Correct!', fg='green')
                self.points += 1
                self.update_points()
                if self.points >= 10:
                    self.end_game()
                else:
                    self.generate_question()
            else:
                self.feedback_label.config(text='Wrong!', fg='red')
        except ValueError:
            self.feedback_label.config(text='Enter a valid number', fg='red')
        self.answer_entry.delete(0, tk.END)

    def update_points(self):
        self.points_label.config(text=f'Points: {self.points}')

    def end_game(self):
        elapsed_time = int(time.time() - self.start_time)
        minutes = elapsed_time // 60
        seconds = elapsed_time % 60
        self.feedback_label.config(text=f'Congratulations! You reached 10 points in {minutes:02}:{seconds:02}.', fg='blue')
        self.save_high_score(minutes, seconds)
        self.start_button.config(text='Play Again', command=self.return_to_difficulty_selection)

    def save_high_score(self, minutes, seconds):
        # Save the high score and time to a file
        with open('high_scores.txt', 'a') as file:
            file.write(f'Score: {self.points} - Difficulty: {self.diff_level} - Time: {minutes:02}:{seconds:02}\n')

    def return_to_difficulty_selection(self):
        self.root.destroy()
        main_root = tk.Tk()
        DifficultySelection(main_root)
        main_root.mainloop()

if __name__ == '__main__':
    root = tk.Tk()
    app = StartupScreen(root)
    root.mainloop()
