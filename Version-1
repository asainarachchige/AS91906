import tkinter as tk
import random

class DifficultySelection:
    def __init__(self, root):
        self.root = root
        self.root.title('Select Difficulty')
        self.root.geometry('300x200')
        
        # GUI Components
        self.label = tk.Label(root, text='Select Difficulty Level', font=('Arial', 14))
        self.easy_button = tk.Button(root, text='Easy', command=lambda: self.start_game(1))
        self.medium_button = tk.Button(root, text='Medium', command=lambda: self.start_game(2))
        self.hard_button = tk.Button(root, text='Hard', command=lambda: self.start_game(3))
        
        # Layout
        self.label.pack(pady=20)
        self.easy_button.pack(pady=10)
        self.medium_button.pack(pady=10)
        self.hard_button.pack(pady=10)

    def start_game(self, difficulty_level):
        self.root.destroy()  # Close the difficulty selection window
        game_root = tk.Tk()
        MathGame(game_root, difficulty_level)
        game_root.mainloop()

class MathGame:
    def __init__(self, root, difficulty_level):
        self.root = root
        self.root.title('Math Game')
        self.root.geometry('300x300')

        self.points = 0  # Initially the player's score (points) is set to 0.
        self.diff_level = difficulty_level

        self.points_label = tk.Label(root, text=f'Points: {self.points}')  # Creates a Label widget to display the score points. Initially shows "0 Points".
        self.question_label = tk.Label(root, text='')  # Makes a Label widget displaying the question with the two numbers to sum up.
        self.answer_entry = tk.Entry(root)  # Creates an Entry widget where users can type out their response         
        self.submit_button = tk.Button(root, text='Submit', command=self.check_answer)  # Creates a Button with the text "Submit". And when initiated, it calls the check_answer method.
        self.feedback_label = tk.Label(root, text='')  # Creates a Label widget that displays feedback ("Correct!" or "Wrong!").
        self.start_button = tk.Button(root, text='Start Game', command=self.start_game)

        self.points_label.pack(pady=10)
        self.question_label.pack(pady=10)  # Adds the question label to the window with 10 pixels of padding vertically
        self.answer_entry.pack(pady=10)
        self.submit_button.pack(pady=10)  # Adds the submit button to the window with 10 pixels of padding vertically
        self.feedback_label.pack(pady=10)
        self.start_button.pack(pady=10) # Adds the start button to the window with 10 pixels of padding vertically

    def start_game(self):
        self.points = 0
        self.update_points()
        self.generate_question()
        self.answer_entry.focus_set()

    def generate_question(self):
        if self.diff_level == 1:  # Easy: Very simple addition and subtraction
            self.x = random.randint(0, 10)
            self.y = random.randint(0, 10)
            operation = random.choice(['+', '-'])
            self.result = self.x + self.y if operation == '+' else self.x - self.y
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')
        elif self.diff_level == 2:  # Medium: All operations with smaller numbers
            self.x = random.randint(-20, 20)
            self.y = random.randint(-20, 20)
            operation = random.choice(['+', '-', '*', '/'])
            if operation == '+':
                self.result = self.x + self.y
            elif operation == '-':
                self.result = self.x - self.y
            elif operation == '*':
                self.result = self.x * self.y
            else:
                self.result = self.x // self.y if self.y != 0 else 0  # Avoid division by zero
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')
        else:  # Hard: Multiplication and Division with larger numbers
            self.x = random.randint(-50, 50)
            self.y = random.randint(-50, 50)
            operation = random.choice(['+', '-', '*', '/'])
            if operation == '+':
                self.result = self.x + self.y
            elif operation == '-':
                self.result = self.x - self.y
            elif operation == '*':
                self.result = self.x * self.y
            else:
                self.result = self.x // self.y if self.y != 0 else 0  # Avoid division by zero
            self.question_label.config(text=f'{self.x} {operation} {self.y} = ?')

    def check_answer(self):
        try:
            answer = int(self.answer_entry.get())
            if answer == self.result:
                self.feedback_label.config(text='Correct!', fg='green')
                self.points += 1
                self.update_points()
                if self.points >= 10:
                    self.end_game()
                else:
                    self.generate_question()
            else:
                self.feedback_label.config(text='Wrong!', fg='red')
        except ValueError:
            self.feedback_label.config(text='Enter a valid number', fg='red')
        self.answer_entry.delete(0, tk.END)

    def update_points(self):
        self.points_label.config(text=f'Points: {self.points}')

    def end_game(self):
        self.feedback_label.config(text='Congratulations! You reached 10 points.', fg='blue')
        self.save_high_score()
        self.start_button.config(text='Play Again', command=self.restart_game)

    def save_high_score(self):
        # Save the high score to a file
        with open('high_scores.txt', 'a') as file:
            file.write(f'Score: {self.points} - Difficulty: {self.diff_level}\n')

    def restart_game(self):
        self.root.destroy()
        game_root = tk.Tk()
        MathGame(game_root, self.diff_level)
        game_root.mainloop()

if __name__ == '__main__':
    root = tk.Tk()
    app = DifficultySelection(root)
    root.mainloop()
